# If not installed, install it
install.packages(acro)
# Load the package
library(acro, character.only = TRUE)
}
# Check if acro is installed
if (!requireNamespace("acro", quietly = TRUE)) {
# If not installed, install it
install.packages("acro")
# Load the package
library("acro", character.only = TRUE)
}
?acro_init
# Check if acro is installed
if (!requireNamespace("acro", quietly = TRUE)) {
# If not installed, install it
install.packages("acro")
}
### Load the acro package
```{r}
```{r}
```{r}
```{r}
library("acro")
```{r}
# Check if acro is installed
if (!requireNamespace("acro", quietly = TRUE)) {
# If not installed, install it
install.packages("acro")
}
library("acro")
# Check if acro is installed
if (!requireNamespace("acro", quietly = TRUE)) {
# If not installed, install it
install.packages("acro")
}
data$children <-as.numeric(as.character(data$children))
data[is.na(data)] <-  round(runif(sum(is.na(data)), min = 4, max = 10),0)
unique(data$children)
index = data[, c("recommend")]
columns = data[, c("parents")]
table = acro_table(index=index, columns=columns, deparse.level=1)
index = data[, c("recommend")]
columns = data[, c("parents")]
table = acro_table(index=index, columns=columns, deparse.level=1)
table
index = "parents"
values = "children"
aggfunc = list("mean", "std")
table = acro_pivot_table(data, values=values, index=index, aggfunc=aggfunc)
table
acro_hist(data, "children")
data(package = "survival")
# Load the lung dataset
data(lung)
#head(lung)
acro_surv_func(time=lung$time, status=lung$status, output ="plot")
remove.packages("survival")
# Load the lung dataset
data(lung)
#head(lung)
acro_surv_func(time=lung$time, status=lung$status, output ="plot")
library("survival")
View(lung)
rm(list = ls())
data(lung)
#head(lung)
acro_surv_func(time=lung$time, status=lung$status, output ="plot")
library("survival")
data$recommend <- as.character(data$recommend)
data$recommend <- as.character(data$recommend)
data$recommend <- as.character(data$recommend)
names(data)[names(data) == "class"] <- "recommend"
data = farff::readARFF("nursery_data/nursery.arff")
data = as.data.frame(data)
names(data)[names(data) == "class"] <- "recommend"
data$recommend <- as.character(data$recommend)
data$recommend[which(data$recommend=="not_recom")] <- "0"
data$recommend[which(data$recommend=="recommend")] <- "1"
data$recommend[which(data$recommend=="very_recom")] <- "2"
data$recommend[which(data$recommend=="priority")] <- "3"
data$recommend[which(data$recommend=="spec_prior")] <- "4"
data$recommend <- as.numeric(data$recommend)
# Check if acro is installed
if (!requireNamespace("acro", quietly = TRUE)) {
# If not installed, install it
install.packages("acro")
}
library("acro")
# Check if acro is installed
if (!requireNamespace("acro", quietly = TRUE)) {
# If not installed, install it
install.packages("acro")
}
library("acro")
acro_init()
data = farff::readARFF("nursery_data/nursery.arff")
data = as.data.frame(data)
names(data)[names(data) == "class"] <- "recommend"
data$children <-as.numeric(as.character(data$children))
data[is.na(data)] <-  round(runif(sum(is.na(data)), min = 4, max = 10),0)
unique(data$children)
index = data[, c("health")]
columns = data[, c("finance")]
values = data[, c("children")]
table = acro_crosstab(index = index, columns= columns, values= values,  aggfunc = "mean")
index = data[, c("health")]
columns = data[, c("finance")]
values = data[, c("children")]
table = acro_crosstab(index = index, columns= columns, values= values,  aggfunc = "mean")
unique(data$children)
unique(data$children)
index = data[, c("health")]
columns = data[, c("finance")]
values = data[, c("children")]
table = acro_crosstab(index = index, columns= columns, values= values,  aggfunc = "mean")
data$children <-as.numeric(as.character(data$children))
data[is.na(data)] <-  round(runif(sum(is.na(data)), min = 4, max = 10),0)
unique(data$children)
index = data[, c("health")]
columns = data[, c("finance")]
values = data[, c("children")]
table = acro_crosstab(index = index, columns= columns, values= values,  aggfunc = "mean")
index = data[, c("recommend")]
columns = data[, c("parents")]
table = acro_table(index=index, columns=columns, deparse.level=1)
table
index = data[, c("health")]
columns = data[, c("finance")]
values = data[, c("children")]
table = acro_crosstab(index = index, columns= columns, values= values,  aggfunc = "mean")
index = data[, c("health")]
columns = data[, c("finance")]
values = data[, c("children")]
table = acro_crosstab(index = index, columns= columns, values= data[, c("children")],  aggfunc = "mean")
data$children <-as.numeric(as.character(data$children))
data[is.na(data)] <-  round(runif(sum(is.na(data)), min = 4, max = 10),0)
unique(data$children)
data$children <-as.numeric(as.character(data$children))
data[is.na(data)] <-  round(runif(sum(is.na(data)), min = 4, max = 10),0)
unique(data$children)
index = "parents"
values = "children"
aggfunc = list("mean", "std")
table = acro_pivot_table(data, values=values, index=index, aggfunc=aggfunc)
table
acro_hist(data, "children")
# Load the lung dataset
data(lung)
#head(lung)
acro_surv_func(time=lung$time, status=lung$status, output ="plot")
data$recommend <- as.character(data$recommend)
data$recommend[which(data$recommend=="not_recom")] <- "0"
data$recommend[which(data$recommend=="recommend")] <- "1"
data$recommend[which(data$recommend=="very_recom")] <- "2"
data$recommend[which(data$recommend=="priority")] <- "3"
data$recommend[which(data$recommend=="spec_prior")] <- "4"
data$recommend <- as.numeric(data$recommend)
acro_lm(formula=formula, data=df)
# extract relevant columns
df = data[, c("recommend", "children")]
# drop rows with missing values
df = df[complete.cases(df), ]
# formula to fit
formu
# extract relevant columns
df = data[, c("recommend", "children")]
# drop rows with missing values
df = df[complete.cases(df), ]
# formula to fit
formula = "recommend ~ children"
acro_glm(formula=formula, data=df, family="logit")
acro_lm(formula=formula, data=df)
acro_glm(formula=formula, data=df, family="logit")
# extract relevant columns
df = data[, c("finance", "children")]
# drop rows with missing values
df = df[complete.cases(df), ]
# convert finance to numeric
df = transform(df, finance = as.numeric(finance))
# subtract 1 to make 1s and 2S into 0a and 1s
df$finance <- df$finance -1
# formula to fit
formula = "finance ~ children"
acro_glm(formula=formula, data=df, family="logit")
acro_glm(formula=formula, data=df, family="probit")
acro_rename_output("output_0", "xy_plot")
acro_rename_output("output_0", "crosstab")
acro_remove_output("output_3")
acro_print_outputs()
acro_add_comments("output_0", "This is a crosstab on the nursery dataset.")
acro_add_comments("output_1", "This is a crosstab on the nursery dataset.")
#acro_finalise("RTEST", "xlsx")
acro_finalise("RTEST", "json")
jd
hd
index = data[, c("health")]
columns = data[, c("finance")]
values = data[, c("children")]
table = acro_crosstab(index = index, columns= columns, values= data[, c("children")],  aggfunc = "mean")
data$children <-as.numeric(as.character(data$children))
data[is.na(data)] <-  round(runif(sum(is.na(data)), min = 4, max = 10),0)
unique(data$children)
unique(data$children)
#data$children <- sub("more","6",data$children)
unique(data$children)
data$children <-as.numeric(as.character(data$children))
unique(data$children)
data[is.na(data)] <-  round(runif(sum(is.na(data)), min = 4, max = 10),0)
unique(data$children)
index = data[, c("health")]
columns = data[, c("finance")]
values = data[, c("children")]
table = acro_crosstab(index = index, columns= columns, values= data[, c("children")],  aggfunc = "mean")
data = farff::readARFF("nursery_data/nursery.arff")
data = as.data.frame(data)
names(data)[names(data) == "class"] <- "recommend"
unique(data$children)
#data$children <- sub("more","6",data$children)
unique(data$children)
data$children <-as.numeric(as.character(data$children))
unique(data$children)
data[is.na(data)] <-  round(runif(sum(is.na(data)), min = 4, max = 10),0)
unique(data$children)
index = data[, c("health")]
columns = data[, c("finance")]
values = data[, c("children")]
table = acro_crosstab(index = index, columns= columns, values= data[, c("children")],  aggfunc = "mean")
index = data[, c("health")]
columns = data[, c("finance")]
values = data[, c("children")]
table = acro_crosstab(index = data[, c("health")], columns= data[, c("finance")], values= data[, c("children")],  aggfunc = "mean")
index = data[, c("health")]
columns = data[, c("finance")]
values = data[, c("children")]
table = acro_crosstab(data[, c("health")],ata[, c("finance")],data[, c("children")],  aggfunc = "mean")
index = data[, c("health")]
columns = data[, c("finance")]
values = data[, c("children")]
table = acro_crosstab(data[, c("health")],data[, c("finance")],data[, c("children")],  aggfunc = "mean")
# Check if acro is installed
if (!requireNamespace("acro", quietly = TRUE)) {
# If not installed, install it
install.packages("acro")
}
library("acro")
acro_init()
data = farff::readARFF("nursery_data/nursery.arff")
data = as.data.frame(data)
names(data)[names(data) == "class"] <- "recommend"
data$children <-as.numeric(as.character(data$children))
data[is.na(data)] <-  round(runif(sum(is.na(data)), min = 4, max = 10),0)
unique(data$children)
index = data[, c("health")]
columns = data[, c("finance")]
values = data[, c("children")]
table = acro_crosstab(index = index, columns= columns, values= data[, c("children")],  aggfunc = "mean")
print(values)
table = acro_crosstab(index = index, columns= columns, values= data[, c("children")],  aggfunc = "mean")
print(index)
print(columns)
table = acro_crosstab(index = index, columns= columns, values= data[, c("children")],  aggfunc = "sum")
table = acro_crosstab(index = index, columns= columns,  aggfunc = "sum")
table = acro_crosstab(index = index, columns= columns,values = values,  aggfunc = "sum")
length(data$health)
length(data$finance)
length(data$children)
table = acro_crosstab(index = index, columns= columns,values = values,  aggfunc = "sum")
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
table = acro_table(index=index, columns=columns, values=values, deparse.level=1)
table
library(reticulate)
py_run_string("import pandas as pd")
data <- data.frame(
Category1 = c("A", "B", "A", "B", "A"),
Category2 = c("X", "Y", "X", "Y", "Z"),
)
data <- data.frame(
Category1 = c("A", "B", "A", "B", "A"),
Category2 = c("X", "Y", "X", "Y", "Z"), category3= c(1,2,3,4,5)
)
py_data <- r_to_py(data)
crosstab_result <- py_run_string("pd.crosstab(py_data['Category1'], py_data['Category2'], py_data['category3'], aggfunc="mean)")
crosstab_result <- py_run_string("pd.crosstab(py_data['Category1'], py_data['Category2'], py_data['category3'], aggfunc="mean")
crosstab_result <- py_run_string("pd.crosstab(py_data['Category1'], py_data['Category2'], py_data['category3'], aggfunc="mean""))
crosstab_result <- py_run_string("pd.crosstab(py_data['Category1'], py_data['Category2'], values=py_data['category3'], aggfunc="mean")")
py_run_string("pd.crosstab(data$health, data$finance, data$children, aggfunc="mean")")
# Assuming 'data' is your R dataframe
py_run_string('pd.crosstab(data$health, data$finance, data$children, aggfunc="mean")')
# Assuming 'data' is your R dataframe
py_run_string('pd.crosstab(data$health, data$finance, data$children, aggfunc="mean")')
# Assuming 'data' is your R dataframe
py_run_string('pd.crosstab(data[, c("health")], data$finance, data$children, aggfunc="mean")')
head(data)
data = farff::readARFF("nursery_data/nursery.arff")
data = as.data.frame(data)
names(data)[names(data) == "class"] <- "recommend"
data$children <-as.numeric(as.character(data$children))
data[is.na(data)] <-  round(runif(sum(is.na(data)), min = 4, max = 10),0)
unique(data$children)
head(data)
index = data[, c("parents")]
columns = data[, c("social")]
values = data[, c("children")]
table = acro_crosstab(index = index, columns= columns,values = values,  aggfunc = "sum")
index = data[, "parents"]
columns = data[, "social"]
values = data[, "children"]
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "sum")
index = data[, "parents"]
columns = data[, "social"]
values = data[, "children"]
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "sum")
index = data[, c("parents")]
columns = data[, c("social")]
values = data[, c("children")]
# convert the column values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "sum")
table
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
# convert the column values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "sum")
table
library(acro)
help(acro_crosstab)
help(package = acro)
library("acro")
library("acro")
library("acro")
acro_init()
data = farff::readARFF("nursery_data/nursery.arff")
data = as.data.frame(data)
names(data)[names(data) == "class"] <- "recommend"
data$children <-as.numeric(as.character(data$children))
data[is.na(data)] <-  round(runif(sum(is.na(data)), min = 4, max = 10),0)
unique(data$children)
index = data[, c("parents")]
columns = data[, c("social")]
table = table(index, columns)
table
table = table(index, columns, deparse.level=1)
table
index = data[, c("parents")]
columns = data[, c("social")]
table = acro_table(index=index, columns=columns, deparse.level=1)
table
help(package=acro)
data$recommend <- as.character(data$recommend)
data$recommend[which(data$recommend=="not_recom")] <- "0"
data$recommend[which(data$recommend=="recommend")] <- "1"
data$recommend[which(data$recommend=="very_recom")] <- "2"
data$recommend[which(data$recommend=="priority")] <- "3"
data$recommend[which(data$recommend=="spec_prior")] <- "4"
data$recommend <- as.numeric(data$recommend)
# extract relevant columns
df = data[, c("recommend", "children")]
# drop rows with missing values
df = df[complete.cases(df), ]
# formula to fit
formula = "recommend ~ children"
acro_lm(formula=formula, data=df)
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count", margins=True)
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
print(columns)
print(c(df$parents, df$has_nurs))
columns = data[, c("parents", "has_nurs")]
print(columns)
print(typeof(columns))
columns = data[, c("parents", "has_nurs")]
print(columns)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
columns = list(data[, c("parents", "has_nurs")])
index = data[, c("recommend")]
columns = list(data[, c("parents", "has_nurs")])
values = data[, c("children")]
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
index = data[, c("recommend")]
columns = list(data[, c("parents", "has_nurs")])
values = data[, c("children")]
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
index = data[, c("recommend")]
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
table
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
# Create a list of arrays
columns <- lapply(columns, as.list)
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
# Create a list of arrays
columns <- lapply(columns, as.list)
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
print(typeof(columns))
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
print(typeof(c("parents")))
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
print(typeof(data[,c("parents")]))
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
print(typeof(data[, c("recommend")])
# convert the values to an array
values = matrix(values, ncol=1)
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
print(typeof(data[, c("recommend")]))
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
reticulate::py_last_error()
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
table
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
print(typeof(columns))
print(columns)
print(columns)
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
print(columns)
# convert the values to an array
# values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
index = data[, c("recommend")]
columns = data[, c("parents", "has_nurs")]
values = data[, c("children")]
print(typeof(values))
values = data[c("children")]
print(typeof(values))
columns = data[c("parents", "has_nurs")]
print(typeof(columns))
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
index = data[, c("recommend", "has_nurs")]
columns = data[, c("parents")]
values = data[, c("children")]
# convert the values to an array
values = matrix(values, ncol=1)
table = acro_crosstab(index = index, columns= columns, values = values,  aggfunc = "count")
