library("devtools")
use_package("reticulate")
devtools::load_all(".")
maha()
library(acro)
maha()
library(acro)
example("maha", "acro")
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
library("acro")
maha()
setwd("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
devtools::load_all()
library(acro)
maha()
devtools::load_all(".")
maha()
example("maha", "acro")
?maha()
?maha()
example("maha", "acro")
example("maha", "acro")
?maha()
devtools::load_all(".")
head(data)
data = farff::readARFF("C:/Users/M-ALBASHIR/Desktop/AI-SDC/ACRO/data/nursery.arff")
data = as.data.frame(data)
names(data)[names(data) == "class"] <- "recommend"
unique(data$children)
#data$children <- sub("more","6",data$children)
unique(data$children)
data$children <-as.numeric(as.character(data$children))
unique(data$children)
data[is.na(data)] <-  round(runif(sum(is.na(data)), min = 4, max = 10),0)
unique(data$children)
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
aggfunc = "mean"
table = acro_crosstab(index, columns)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
acro_init()
head(data)
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
aggfunc = "mean"
table = acro_crosstab(index, columns)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
aggfunc = "mean"
table = acro_crosstab(index, columns)
library(acro)
acro_print_outputs()
acro_print_outputs
acro_print_outputs()
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
aggfunc = "mean"
table = acro_crosstab(index, columns)
library(acro)
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
aggfunc = "mean"
table = acro_crosstab(index, columns)
library(acro)
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
aggfunc = "mean"
table = acro_crosstab(index, columns)
library(acro)
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
aggfunc = "mean"
table = acro_crosstab(index, columns)
library(acro)
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
aggfunc = "mean"
table = acro_crosstab(index, columns)
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
aggfunc = "mean"
table = acro_table(index, columns)
library(acro)
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
aggfunc = "mean"
table = acro_crosstab(index, columns)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(acro)
table = acro_crosstab(index, columns)
library(acro)
table = acro_crosstab(index, columns)
library(acro)
library(acro)
devtools::load_all(".")
library(acro)
table = acro_crosstab(index, columns)
library(acro)
table = acro_crosstab(index, columns)
library(acro)
table = acro_crosstab(index, columns)
library(acro)
table = acro_crosstab(index, columns)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(acro)
table = acro_crosstab(index, columns)
devtools::load_all(".")
library(acro)
table = acro_crosstab(index, columns)
devtools::load_all(".")
library(acro)
table = acro_crosstab(index, columns)
table = acro_table(index, columns)
library(acro)
acro_print_outputs()
table = acro_table(index, columns)
table = acro_crosstab(index, columns)
acro_rename_output("output_0", "crosstab")
acro_finalise("outputes", "json")
f
f
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
library(acro)
library("acro")
library(acro)
table = acro_crosstab(index, columns)
table = acro_table(index, columns)
index = "parents"
values = "children"
aggfunc = list("mean", "std")
table = acro_pivot_table(data, values=values, index=index, aggfunc=aggfunc)
acro_finalise("outputs", "json")
s
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
table = acro_table(index, columns)
library("acro")
library(acro)
table = acro_table(index, columns)
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
library(acro)
library(acro)
table = acro_table(index, columns)
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
library(acro)
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
library(acro)
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
library(acro)
devtools::load_all(".")
rm(list = c(".onLoad"))
devtools::load_all(".")
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
library(acro)
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
library(acro)
library(acro)
system.file(package = "acro")
library("devtools")
build("C:/Users/M-ALBASHIR/AppData/Local/Programs/R/R-4.3.1/library/acro")
install("C:/Users/M-ALBASHIR/AppData/Local/Programs/R/R-4.3.1/library/acro")
library(acro)
table = acro_table(index, columns)
library(acro)
acro_print_outputs()
library(acro)
acro_print_outputs()
library("devtools")
build("C:/Users/M-ALBASHIR/AppData/Local/Programs/R/R-4.3.1/library/acro")
install("C:/Users/M-ALBASHIR/AppData/Local/Programs/R/R-4.3.1/library/acro")
install("C:/Users/M-ALBASHIR/AppData/Local/Programs/R/R-4.3.1/library/acro")
library(acro)
acro_print_outputs()
library(acro)
acro_print_outputs()
library("devtools")
build("C:/Users/M-ALBASHIR/AppData/Local/Programs/R/R-4.3.1/library/acro")
.Last.error#
.Last.error#
library("devtools")
build("C:/Users/M-ALBASHIR/AppData/Local/Programs/R/R-4.3.1/library/acro")
devtools::check()
devtools::check()
devtools::load_all(".")
library(acro)
acro_print_outputs()
table = acro_table(index, columns)
acro_print_outputs()
table
library(acro)
acro_print_outputs()
library("devtools")
build("C:/Users/M-ALBASHIR/AppData/Local/Programs/R/R-4.3.1/library/acro")
pkgbuild::check_build_tools(debug = TRUE)
library("devtools")
build("C:/Users/M-ALBASHIR/AppData/Local/Programs/R/R-4.3.1/library/acro")
setwd("C:/Users/M-ALBASHIR/AppData/Local/Programs/R/R-4.3.1/library/acro")
devtools::build()
devtools::check()
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
library(acro)
table = acro_table(index, columns)
acro_print_outputs()
library(acro)
acro_print_outputs()
devtools::check()
library("acro")
acro_print_outputs()
table = acro_table(index, columns)
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
library(acro)
acro_print_outputs()
table = acro_table(index, columns)
acro_print_outputs()
library(acro)
acro_print_outputs()
library(acro)
acro_print_outputs()
View(acro)
library(acro)
devtools::load_all("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
acro_print_outputs()
table = acro_table(index, columns)
acro_print_outputs()
devtools::load_all("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
acro_print_outputs()
library(acro)
detach(package:acro)
library(acro)
detach(package:acro)
library(acro)
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
devtools::load_all("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
devtools::load_all("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
devtools::load_all("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
table = acro_table(index, columns)
devtools::load_all("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
devtools::load_all("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
table = acro_table(index, columns)
data$recommend <- as.character(data$recommend)
data$recommend[which(data$recommend=="not_recom")] <- "0"
data$recommend[which(data$recommend=="recommend")] <- "1"
data$recommend[which(data$recommend=="very_recom")] <- "2"
data$recommend[which(data$recommend=="priority")] <- "3"
data$recommend[which(data$recommend=="spec_prior")] <- "4"
data$recommend <- as.numeric(data$recommend)
df = data[, c("recommend", "children")]
# drop rows with missing values
df = df[complete.cases(df), ]
# formula to fit
formula = "recommend ~ children"
model = lm(formula=formula, data=df)
summary(model
)
acro_lm(formula=formula, data=df)
acro_remove_output(output_0)
acro_remove_output("output_0")
library("acro")
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
.rs.restartR()
library("devtools")
build("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
install("C:/Users/M-ALBASHIR/Desktop/CRAN/acro")
library("devtools")
library("acro")
acro_lm(formula=formula, data=df)
library("acro")
pkgbuild::check_build_tools(debug = TRUE)
library(acro)
acro_init()
acro_lm(formula=formula, data=df)
table = acro_table(index, columns)
data = farff::readARFF("C:/Users/M-ALBASHIR/Desktop\AI-SDC\ACRO\data")
data = farff::readARFF("C:/Users/M-ALBASHIR/Desktop/AI-SDC/ACRO/data/nursery.arff")
data = as.data.frame(data)
names(data)[names(data) == "class"] <- "recommend"
unique(data$children)
#data$children <- sub("more","6",data$children)
unique(data$children)
data$children <-as.numeric(as.character(data$children))
unique(data$children)
data[is.na(data)] <-  round(runif(sum(is.na(data)), min = 4, max = 10),0)
unique(data$children)
index = data[, c("recommend")]
columns = data[, c("parents")]
values = data[, c("children")]
aggfunc = "mean"
table = acro_crosstab(index, columns)
data$recommend <- as.character(data$recommend)
data$recommend[which(data$recommend=="not_recom")] <- "0"
data$recommend[which(data$recommend=="recommend")] <- "1"
data$recommend[which(data$recommend=="very_recom")] <- "2"
data$recommend[which(data$recommend=="priority")] <- "3"
data$recommend[which(data$recommend=="spec_prior")] <- "4"
data$recommend <- as.numeric(data$recommend)
df = data[, c("recommend", "children")]
# drop rows with missing values
df = df[complete.cases(df), ]
# formula to fit
formula = "recommend ~ children"
model = lm(formula=formula, data=df)
summary(model)
acro_lm(formula=formula, data=df)
acro_print_outputs()
acro_init()
acro_print_outputs()
devtools::document()
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
#' Fits Ordinary Least Squares Regression
#'
#' @param formula The formula specifying the model.
#' @param data The data for the model.
#'
#' @return Regression Results Wrapper.
#' @export
#'
#' @examples
acro_lm <- function(formula, data)
{
"ACRO linear model"
model = ac$olsr(formula, data)
model$summary()
}
#' Fits Logit or Probit model.
#'
#' @param formula The formula specifying the model.
#' @param data The data for the model.
#' @param family Decide whether to fit a logit or probit model.
#'
#' @return Regression Results Wrapper
library(acro)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
pkgbuild::find_rtools(debug = TRUE)
library(pkgbuild)
help(pkgbuild)
rtools_path()
has_rtools(debug = FALSE)
check_rtools(debug = FALSE)
find_rtools()
pkgbuild::find_rtools()
pkgbuild::find_rtools(debug=TRUE)
check_rtools(debug = FALSE)
devtools::check()
add_to_buildignore("charity_data")
add_to_buildignore("charity_data")
usethis::use_build_ignore("charity_data")
data <- read_dta('C:/Users/M-ALBASHIR/Desktop/CRAN/acro/charity_data/test_data.dta')
library(haven)
data <- read_dta('C:/Users/M-ALBASHIR/Desktop/CRAN/acro/charity_data/test_data.dta')
usethis::use_data(data)
use_r("data")
usethis::use_r("data")
charity_data <- read_dta('C:/Users/M-ALBASHIR/Desktop/CRAN/acro/charity_data/test_data.dta')
usethis::use_data(charity_data)
devtools::load_all(".")
example(acro_crosstab)
devtools::load_all(".")
example(acro_crosstab)
?acro_crosstab
?acro_crosstab
R.version()
R --version
R.version.string
devtools::document()
?acro_crosstab
?acro_crosstab
devtools::load_all(".")
?acro_crosstab
?acro_init
